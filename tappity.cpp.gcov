        -:    0:Source:tappity.cpp
        -:    0:Graph:tappity.gcno
        -:    0:Data:tappity.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "tappity.h"
        -:    2:/**
        -:    3: * Class for tappity
        -:    4:**/
        -:    5:#include <iostream>
        -:    6:using namespace std;
        -:    7://Constructor sets the reference phrase
function _ZN7tappityC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 19 returned 100% blocks executed 63%
       19:    8:tappity::tappity(std::string reference){
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
       19:    9:    m_refrence = reference;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       19:   10:}
        -:   11:
        -:   12://Provide the input to be compared to the reference. Before this 
        -:   13://function is called, the input should be considered an empty string
function _ZN7tappity5entryENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 19 returned 100% blocks executed 100%
       19:   14:void tappity::entry(std::string input){
       19:   15:    m_input = input;
call    0 returned 100%
       19:   16:}
        -:   17:
        -:   18://Compares the length of the reference to that of the input and
        -:   19://returns the absolute value of the difference, or 0 if they are the
        -:   20://same length
        -:   21:
function _ZN7tappity17length_differenceEv called 9 returned 100% blocks executed 99%
        9:   22:int tappity::length_difference(){
        -:   23:    
        9:   24:    int length = 0;
        -:   25:
        9:   26:    if(m_input == " " && m_refrence == " "){
call    0 returned 100%
branch  1 taken 22% (fallthrough)
branch  2 taken 78%
call    3 returned 100%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
branch  6 taken 11% (fallthrough)
branch  7 taken 89%
        -:   27:        
        1:   28:        return 0;
        -:   29:    }
        8:   30:    else if(m_input != " " && m_refrence == " "){
call    0 returned 100%
branch  1 taken 88% (fallthrough)
branch  2 taken 13%
call    3 returned 100%
branch  4 taken 14% (fallthrough)
branch  5 taken 86%
branch  6 taken 13% (fallthrough)
branch  7 taken 88%
        -:   31:        
        1:   32:        return 1;
        -:   33:    }
        7:   34:    else if(m_input == " " && m_refrence != " "){
call    0 returned 100%
branch  1 taken 14% (fallthrough)
branch  2 taken 86%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 14% (fallthrough)
branch  7 taken 86%
        -:   35:        
        1:   36:        return 1;
        -:   37:    }
        6:   38:    else if(m_input.length() == 1 && m_refrence.length() == 1){
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
call    3 returned 100%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
branch  6 taken 17% (fallthrough)
branch  7 taken 83%
        -:   39:        
        1:   40:        return 0;
        -:   41:    }
        -:   42:    else{
        -:   43:
       13:   44:        for(int i = 0; i < m_input.length(); i++){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       13:   45:            if(m_input[i] == m_refrence[i]){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 77% (fallthrough)
branch  3 taken 23%
       10:   46:                length+=1;
        -:   47:            }
       13:   48:            if(m_input[i+1] == '\0' && m_refrence[i+1] != '\0'){
call    0 returned 100%
branch  1 taken 31% (fallthrough)
branch  2 taken 69%
call    3 returned 100%
branch  4 taken 25% (fallthrough)
branch  5 taken 75%
branch  6 taken 8% (fallthrough)
branch  7 taken 92%
        -:   49:
        1:   50:                return (m_refrence.length()-length); 
call    0 returned 100%
        -:   51:            }
       12:   52:            if(m_input[i+1] != '\0' && m_refrence[i+1] == '\0'){
call    0 returned 100%
branch  1 taken 75% (fallthrough)
branch  2 taken 25%
call    3 returned 100%
branch  4 taken 11% (fallthrough)
branch  5 taken 89%
branch  6 taken 8% (fallthrough)
branch  7 taken 92%
        -:   53:
        1:   54:                return (m_input.length()-length); 
call    0 returned 100%
        -:   55:            }
       11:   56:            if(m_input[i+1] == '\0' && m_refrence[i+1] == '\0'){
call    0 returned 100%
branch  1 taken 27% (fallthrough)
branch  2 taken 73%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 27% (fallthrough)
branch  7 taken 73%
        -:   57:                
        3:   58:                return (m_refrence.length()-length);
call    0 returned 100%
        -:   59:            }
        -:   60:        }
        -:   61:    }
    #####:   62:    return -1;
        -:   63:}
        -:   64:
        -:   65://Compares the content of the reference to that of the input and
        -:   66://calculates the accuracy of matching characters. If the two strings
        -:   67://are identical, accuracy should be 100. However, for each 
        -:   68://corresponding character that does not match in the same location,
        -:   69://the percentage of corresponding characters should be returned.
        -:   70://For example, if the reference and input have 10 letters and the input
        -:   71://matches 8 of the corresponding reference characters, the function 
        -:   72://should return 80. When input does not have the same number of
        -:   73://characters as the reference, the accuracy should represent the percent
        -:   74://of matching characters between the shorter and longer strings. For
        -:   75://example, if one string has 8 characters matching the corresponding
        -:   76://locations in another string that has 16 characters, the accuracy is 50.
function _ZN7tappity8accuracyEv called 10 returned 100% blocks executed 99%
       10:   77:double tappity::accuracy()
        -:   78:{  
       10:   79:    double accuracy = 0;
        -:   80:
       10:   81:    if(m_input == " " && m_refrence == " "){
call    0 returned 100%
branch  1 taken 20% (fallthrough)
branch  2 taken 80%
call    3 returned 100%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
branch  6 taken 10% (fallthrough)
branch  7 taken 90%
        -:   82:        
        1:   83:        return 100;
        -:   84:    }
        9:   85:    else if(m_input != " " && m_refrence == " "){
call    0 returned 100%
branch  1 taken 89% (fallthrough)
branch  2 taken 11%
call    3 returned 100%
branch  4 taken 13% (fallthrough)
branch  5 taken 88%
branch  6 taken 11% (fallthrough)
branch  7 taken 89%
        -:   86:        
        1:   87:        return 0;
        -:   88:    }
        8:   89:    else if(m_input == " " && m_refrence != " "){
call    0 returned 100%
branch  1 taken 13% (fallthrough)
branch  2 taken 88%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 13% (fallthrough)
branch  7 taken 88%
        -:   90:        
        1:   91:        return 0;
        -:   92:    }
        7:   93:    else if(m_input.length() == 1 && m_refrence.length() == 1){
call    0 returned 100%
branch  1 taken 29% (fallthrough)
branch  2 taken 71%
call    3 returned 100%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
branch  6 taken 14% (fallthrough)
branch  7 taken 86%
        -:   94:        
        1:   95:        return 100;
        -:   96:    }
        -:   97:    else{
       20:   98:        for(int i = 0; i < m_input.length(); i++){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       20:   99:            if(m_input[i] == m_refrence[i]){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 80% (fallthrough)
branch  3 taken 20%
       16:  100:                accuracy+=1;
        -:  101:            }
       20:  102:            if(m_input[i+1] == '\0' && m_refrence[i+1] != '\0'){
call    0 returned 100%
branch  1 taken 25% (fallthrough)
branch  2 taken 75%
call    3 returned 100%
branch  4 taken 20% (fallthrough)
branch  5 taken 80%
branch  6 taken 5% (fallthrough)
branch  7 taken 95%
        -:  103:
        1:  104:                return (int((accuracy/m_refrence.length())*100)); 
call    0 returned 100%
        -:  105:            }
       19:  106:            if(m_input[i+1] != '\0' && m_refrence[i+1] == '\0'){
call    0 returned 100%
branch  1 taken 79% (fallthrough)
branch  2 taken 21%
call    3 returned 100%
branch  4 taken 7% (fallthrough)
branch  5 taken 93%
branch  6 taken 5% (fallthrough)
branch  7 taken 95%
        -:  107:
        1:  108:                return (int((accuracy/m_input.length())*100)); 
call    0 returned 100%
        -:  109:            }
       18:  110:            if(m_input[i+1] == '\0' && m_refrence[i+1] == '\0'){
call    0 returned 100%
branch  1 taken 22% (fallthrough)
branch  2 taken 78%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 22% (fallthrough)
branch  7 taken 78%
        -:  111:                
        4:  112:                return (int((accuracy/m_refrence.length())*100));
call    0 returned 100%
        -:  113:            }
        -:  114:        }
        -:  115:    }
    #####:  116:    return -1;
function _GLOBAL__sub_I__ZN7tappityC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3:  117:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
